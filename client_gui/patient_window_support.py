#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 6.2
#  in conjunction with Tcl version 8.6
#    Jun 17, 2021 07:06:13 PM CEST  platform: Windows NT

import sys
from tkinter import END, messagebox

import study_window
from report_generator.report_generator import generate_for_object

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True


def init(top, gui, db_connection, patient1, *args, **kwargs):
    global w, top_level, root, connection, patient
    w = gui
    top_level = top
    root = top
    connection = db_connection
    patient = patient1
    populate()


def open_studies(i):
    print(i)
    study_window.create_Toplevel1(root, connection, studies_list[i])


def fill_studies():
    global studies_list
    studies_list = connection.get_studies_for_patient(patient)

    inner_frame = w.Scrolledwindow1_f
    button = {}
    for i in range(len(studies_list)):
        e = tk.Entry(inner_frame, width=70, fg='blue')
        e.grid(row=i, column=1)
        e.insert(END, studies_list[i].StudyInstanceUID)

        button[i] = tk.Button(inner_frame, text='Open', width=9, command=lambda i=i: open_studies(i))
        button[i].grid(row=i, column=2, sticky='w')
    if button:
        button[0].wait_visibility()
    bbox = inner_frame.bbox()
    w.Scrolledwindow1.configure(scrollregion=bbox)


def fill_fields():
    w.Text1.insert(1.0, patient.patient_id)
    w.Text2.insert(1.0, patient.PatientID)
    w.Text3.insert(1.0, patient.PatientAge)
    w.Text4.insert(1.0, patient.PatientBirthDate)
    w.Text5.insert(1.0, patient.PatientName)
    w.Text6.insert(1.0, patient.PatientSex)


def populate():
    fill_fields()
    fill_studies()


def generate_report():
    name = generate_for_object(patient, "patient_studies", len(studies_list), "report_patient")
    if name:
        messagebox.showinfo("Report generated successfully", "Generated report " + name)
    else:
        messagebox.showerror("Error", "Error during generating report")


def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None


if __name__ == '__main__':
    import patient_window

    patient_window.vp_start_gui()
